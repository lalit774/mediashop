openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /owners:
    get:
      tags:
      - owner-entity-controller
      description: get-owner
      operationId: getCollectionResource-owner-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelOwner'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelOwner'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - owner-entity-controller
      description: create-owner
      operationId: postCollectionResource-owner-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelOwner'
  /owners/{id}:
    get:
      tags:
      - owner-entity-controller
      description: get-owner
      operationId: getItemResource-owner-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelOwner'
        "404":
          description: Not Found
    put:
      tags:
      - owner-entity-controller
      description: update-owner
      operationId: putItemResource-owner-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelOwner'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelOwner'
        "204":
          description: No Content
    delete:
      tags:
      - owner-entity-controller
      description: delete-owner
      operationId: deleteItemResource-owner-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - owner-entity-controller
      description: patch-owner
      operationId: patchItemResource-owner-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelOwner'
        "204":
          description: No Content
  /pets:
    get:
      tags:
      - pet-entity-controller
      description: get-pet
      operationId: getCollectionResource-pet-get_1
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPet'
            application/x-spring-data-compact+json:
              schema:
                $ref: '#/components/schemas/PagedModelEntityModelPet'
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - pet-entity-controller
      description: create-pet
      operationId: postCollectionResource-pet-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequestBody'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
  /pets/search/findPetTypeById:
    get:
      tags:
      - pet-search-controller
      operationId: executeSearch-pet-get
      parameters:
      - name: typeId
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
        "404":
          description: Not Found
  /pets/search/findPetTypes:
    get:
      tags:
      - pet-search-controller
      operationId: executeSearch-pet-get_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CollectionModelEntityModelPet'
        "404":
          description: Not Found
  /pets/{id}:
    get:
      tags:
      - pet-entity-controller
      description: get-pet
      operationId: getItemResource-pet-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
        "404":
          description: Not Found
    put:
      tags:
      - pet-entity-controller
      description: update-pet
      operationId: putItemResource-pet-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
        "204":
          description: No Content
    delete:
      tags:
      - pet-entity-controller
      description: delete-pet
      operationId: deleteItemResource-pet-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - pet-entity-controller
      description: patch-pet
      operationId: patchItemResource-pet-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequestBody'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/EntityModelPet'
        "204":
          description: No Content
  /profile:
    get:
      tags:
      - profile-controller
      operationId: listAllFormsOfMetadata_1
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RepresentationModelObject'
  /profile/owners:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /profile/pets:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1_1_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: '#/components/schemas/JsonSchema'
  /owners/*/pets/{petId}:
    get:
      tags:
      - pet-resource
      operationId: findPet
      parameters:
      - name: petId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/PetDetails'
    put:
      tags:
      - pet-resource
      operationId: processUpdateForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        "204":
          description: No Content
  /owners/{ownerId}/pets:
    post:
      tags:
      - pet-resource
      operationId: processCreationForm
      parameters:
      - name: ownerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Pet'
  /petTypes:
    get:
      tags:
      - pet-resource
      operationId: getPetTypes
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetType'
components:
  schemas:
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AbstractJsonSchemaPropertyObject'
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Item'
        type:
          type: string
        $schema:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/Links'
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        birthDate:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/PetType'
    PetType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    EntityModelOwner:
      required:
      - address
      - city
      - firstName
      - lastName
      - telephone
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        city:
          type: string
        telephone:
          type: string
        _links:
          $ref: '#/components/schemas/Links'
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelOwner:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            owners:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelOwner'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    EntityModelPet:
      type: object
      properties:
        name:
          type: string
        birthDate:
          type: string
          format: date-time
        _links:
          $ref: '#/components/schemas/Links'
    PagedModelEntityModelPet:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            pets:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelPet'
        _links:
          $ref: '#/components/schemas/Links'
        page:
          $ref: '#/components/schemas/PageMetadata'
    CollectionModelEntityModelPet:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            pets:
              type: array
              items:
                $ref: '#/components/schemas/EntityModelPet'
        _links:
          $ref: '#/components/schemas/Links'
    OwnerRequestBody:
      required:
      - address
      - city
      - firstName
      - lastName
      - telephone
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
        city:
          type: string
        telephone:
          type: string
        pets:
          type: array
          items:
            type: string
    PetRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        birthDate:
          type: string
          format: date-time
        type:
          type: string
    PetRequest:
      type: object
      properties:
        id:
          type: integer
          format: int32
        birthDate:
          type: string
          format: date-time
        name:
          maxLength: 2147483647
          minLength: 1
          type: string
        typeId:
          type: integer
          format: int32
    PetDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        owner:
          type: string
        birthDate:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/PetType'
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
